/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Event;
import hr.algebra.model.EventArchive;
import hr.algebra.parsers.rss.EventParser;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import java.awt.EventQueue;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.xml.bind.JAXBException;
import javax.xml.stream.XMLStreamException;

/**
 * --
 *
 * @author kaish
 */
public class UploadEventsPanel extends javax.swing.JPanel {

    private static final String RSS_URL = "https://www.cedefop.europa.eu/en/publications.rss";

    /**
     * Creates new form UploadArticlesPanel
     */
    public UploadEventsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsArticles = new javax.swing.JList<>();
        btnUploadEvents = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(lsArticles);

        btnUploadEvents.setText("Upload Events");
        btnUploadEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadEventsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnUploadEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 1160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUploadEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadEventsActionPerformed

        new Thread(() -> {

            try {
                
//                ParseEvents();
                JAXBParseEvents();

            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload events: " + ex.getMessage());
                System.exit(1);
            }
        }).start();
    }//GEN-LAST:event_btnUploadEventsActionPerformed

    private void JAXBParseEvents() throws MalformedURLException, JAXBException, Exception {

        // JAXB parsing of RSS feed
        EventArchive eventArchive = JAXBUtils.loadRSS(EventArchive.class, RSS_URL);
        List<Event> events = eventArchive.getChannel().getEvents();
        repository.createEvents(events);
        loadModel();
    }

    private void ParseEvents() throws XMLStreamException, IOException, Exception {
        
        // Regular events parser
        List<Event> events = EventParser.parse();
        repository.createEvents(events);
        loadModel();
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUploadEvents;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<hr.algebra.model.Event> lsArticles;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel<Event> eventsModel;
    private Repository repository;

    private void init() {
        try {
            repository = RepositoryFactory.getRepository();
            eventsModel = new DefaultListModel<>();
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(UploadEventsPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void loadModel() throws Exception {
        List<Event> events = repository.selectEvents();

        EventQueue.invokeLater(() -> {

            eventsModel.clear();
            events.forEach(eventsModel::addElement);
            lsArticles.setModel(eventsModel);
        });
    }

}
