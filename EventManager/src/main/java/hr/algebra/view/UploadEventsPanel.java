/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Channel;
import hr.algebra.model.Event;
import hr.algebra.model.EventArchive;
import hr.algebra.model.User;
import hr.algebra.parsers.rss.EventParser;
import hr.algebra.session.Session;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import java.awt.EventQueue;
import java.awt.Font;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.xml.bind.JAXBException;
import javax.xml.stream.XMLStreamException;

/**
 * 
 *
 * @author kaish
 */
public class UploadEventsPanel extends javax.swing.JPanel {

    private static final String RSS_URL = "https://www.cedefop.europa.eu/en/publications.rss";
    private static final String FILENAME = "src/main/resources/eventarchive.xml";
    
    //private List<Event> events;

    /**
     * Creates new form UploadArticlesPanel
     */
    public UploadEventsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsArticles = new javax.swing.JList<>();
        btnUploadEvents = new javax.swing.JButton();
        btnDeleteAll = new javax.swing.JButton();
        btnSaveXml = new javax.swing.JButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(lsArticles);

        btnUploadEvents.setText("Upload Events");
        btnUploadEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadEventsActionPerformed(evt);
            }
        });

        btnDeleteAll.setBackground(new java.awt.Color(204, 0, 51));
        btnDeleteAll.setForeground(java.awt.Color.white);
        btnDeleteAll.setText("Delete All Events");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        btnSaveXml.setText("Save to XML file");
        btnSaveXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveXmlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUploadEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveXml, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUploadEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveXml, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadEventsActionPerformed

        new Thread(() -> {

            try {

//                ParseEvents();
                JAXBParseEvents();

            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload events: " + ex.getMessage());
                System.exit(1);
            }
        }).start();
    }//GEN-LAST:event_btnUploadEventsActionPerformed

    private void JAXBParseEvents() throws MalformedURLException, JAXBException, Exception {

        // JAXB parsing of RSS feed
        EventArchive eventArchive = (EventArchive) JAXBUtils.loadRSS(EventArchive.class, RSS_URL);
        List<Event> events = eventArchive.getChannel().getEvents();
        eventRepository.create(events);
        loadModel();
    }

    private void parseEvents() throws XMLStreamException, IOException, Exception {

        // Regular events parser
        List<Event> events = EventParser.parse();
        eventRepository.create(events);
        loadModel();
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed

        if (MessageUtils.showConfirmDialog(
                "Delete event",
                "Do you really want to delete all events?")) {
            try {

                deleteAllEvents();
                loadModel(); // Just to make sure current DB is shown (nothing)

            } catch (Exception ex) {
                Logger.getLogger(EditEventsPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete events!");
            }
        }
    }//GEN-LAST:event_btnDeleteAllActionPerformed

    private void btnSaveXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveXmlActionPerformed
        try {
            List<Event> events = eventRepository.selectAll();
            
            JAXBUtils.save(new EventArchive(new Channel(events)), FILENAME);
            MessageUtils.showInformationMessage("Info", "Events saved");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to save events");
            Logger.getLogger(EventsOrganiserPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveXmlActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnSaveXml;
    private javax.swing.JButton btnUploadEvents;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<hr.algebra.model.Event> lsArticles;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel<Event> eventsModel;
    private Repository<Event> eventRepository;

    private void init() {
        try {
            eventRepository = RepositoryFactory.getEventRepository();
            eventsModel = new DefaultListModel<>();

            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(UploadEventsPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void loadModel() throws Exception {

        List<Event> events = eventRepository.selectAll();

        EventQueue.invokeLater(() -> {

            eventsModel.clear();
            events.forEach(eventsModel::addElement);
            lsArticles.setModel(eventsModel);
        });
    }

    private void deleteAllEvents() throws Exception {
        List<Event> events = eventRepository.selectAll();

        // For some reason using lambda made me try catch, the throws 
        // clause didn't fix the error so I looped like this
        for (Event event : events) {
            eventRepository.delete(event.getId());
        }

    }

}
