/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Channel;
import hr.algebra.model.OrganiserTransferable;
import hr.algebra.model.Organiser;
import hr.algebra.model.OrganiserAddable;
import hr.algebra.model.Event;
import hr.algebra.model.EventArchive;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;

/**
 *
 * @author kaish
 */
public class EventsOrganiserPanel extends javax.swing.JPanel implements OrganiserAddable {

    private static final String FILENAME = "src/main/resources/eventarchive.xml";

    private List<JTextField> validationFields;
    private List<JLabel> errorLabels;

    private Set<Organiser> allOrganisers = new TreeSet<>();
    private Organiser organiser;
    private List<Event> events = new ArrayList<>();

    private final DefaultListModel<Organiser> allOrganisersModel = new DefaultListModel<>();
    private final DefaultListModel<Organiser> organisersModel = new DefaultListModel<>();
    private final DefaultListModel<Event> eventsModel = new DefaultListModel<>();

    private Repository<Event> eventRepo;
    private Repository<Organiser> organiserRepo;

    /**
     * Creates new form EventManager
     */
    public EventsOrganiserPanel() {
        initComponents();
        init();
        loadEventsAndOrganisers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsOrganisers = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbTitleError = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsAllOrganisers = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsEvents = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnSaveEvents = new javax.swing.JButton();
        btnAddOrganiser = new javax.swing.JButton();
        btnAddEvent = new javax.swing.JButton();
        btnRefreshEvents = new javax.swing.JButton();
        lbOrganisersError = new javax.swing.JLabel();
        tfDesc = new javax.swing.JTextField();
        lbDescError = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1192, 611));

        jScrollPane1.setViewportView(lsOrganisers);

        jLabel2.setText("Title");

        jLabel3.setText("Description");

        jLabel5.setText("Events");

        lbTitleError.setForeground(new java.awt.Color(255, 0, 0));
        lbTitleError.setText("X");

        jScrollPane2.setViewportView(lsAllOrganisers);

        jScrollPane3.setViewportView(lsEvents);

        jLabel10.setText("Organiser");

        jLabel11.setText("All Organisers");

        btnSaveEvents.setText("Save Events");
        btnSaveEvents.setPreferredSize(new java.awt.Dimension(114, 23));
        btnSaveEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveEventsActionPerformed(evt);
            }
        });

        btnAddOrganiser.setText("Add Organiser");
        btnAddOrganiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOrganiserActionPerformed(evt);
            }
        });

        btnAddEvent.setText("Add Event");
        btnAddEvent.setToolTipText("");
        btnAddEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEventActionPerformed(evt);
            }
        });

        btnRefreshEvents.setText("Refresh Events");
        btnRefreshEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshEventsActionPerformed(evt);
            }
        });

        lbOrganisersError.setForeground(new java.awt.Color(255, 0, 0));
        lbOrganisersError.setText("X");

        lbDescError.setForeground(new java.awt.Color(255, 0, 0));
        lbDescError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbDescError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnSaveEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRefreshEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbOrganisersError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addComponent(jLabel11)
                    .addComponent(btnAddOrganiser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(64, 64, 64))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbOrganisersError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(71, 71, 71)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDescError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(61, 61, 61)
                        .addComponent(btnAddEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRefreshEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSaveEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAddOrganiser, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(41, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddOrganiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOrganiserActionPerformed
        new OrganiserDialog((JFrame) SwingUtilities.getWindowAncestor(this), this, false).setVisible(true);
    }//GEN-LAST:event_btnAddOrganiserActionPerformed

    private void btnAddEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEventActionPerformed
        try {
            if (formValid()) {
                Event event = new Event(
                        tfTitle.getText().trim(),
                        tfDesc.getText().trim(),
                        OffsetDateTime.now(),
                        organiser
                );
                eventRepo.create(event);
                loadEventsModel();
                clearForm();
            }
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Error adding event: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnAddEventActionPerformed

    private void btnRefreshEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshEventsActionPerformed
        loadEventsAndOrganisers();
    }//GEN-LAST:event_btnRefreshEventsActionPerformed

    private void btnSaveEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveEventsActionPerformed
        try {
            JAXBUtils.save(new EventArchive(new Channel(events)), FILENAME);
            MessageUtils.showInformationMessage("Info", "Events saved");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to save events");
            Logger.getLogger(EventsOrganiserPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveEventsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EventsOrganiserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EventsOrganiserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EventsOrganiserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EventsOrganiserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EventsOrganiserPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEvent;
    private javax.swing.JButton btnAddOrganiser;
    private javax.swing.JButton btnRefreshEvents;
    private javax.swing.JButton btnSaveEvents;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbDescError;
    private javax.swing.JLabel lbOrganisersError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JList<Organiser> lsAllOrganisers;
    private javax.swing.JList<Event> lsEvents;
    private javax.swing.JList<Organiser> lsOrganisers;
    private javax.swing.JTextField tfDesc;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {

        eventRepo = RepositoryFactory.getEventRepository();
        organiserRepo = RepositoryFactory.getOrganiserRepository();

        initValidation();
        hideErrors();
        initDragNDrop();
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfDesc);
        errorLabels = Arrays.asList(lbTitleError, lbDescError);
    }

    private void hideErrors() {
        errorLabels.forEach(e -> e.setVisible(false));
        lbOrganisersError.setVisible(false);
    }

    private void loadAllOrganisersModel() throws Exception {
        allOrganisersModel.clear();

        allOrganisers = new TreeSet<>(organiserRepo.selectAll());

        allOrganisers.forEach(allOrganisersModel::addElement);
        lsAllOrganisers.setModel(allOrganisersModel);
    }

    private void loadOrganisersModel() {
        organisersModel.clear();
        organisersModel.addElement(organiser);
        lsOrganisers.setModel(organisersModel);
    }

    private void loadEventsModel() throws Exception {
        eventsModel.clear();

        events = eventRepo.selectAll();

        events.forEach(eventsModel::addElement);
        lsEvents.setModel(eventsModel);
    }

    private void initDragNDrop() {
        lsAllOrganisers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllOrganisers.setDragEnabled(true);
        lsAllOrganisers.setTransferHandler(new ExportTransferHandler());

        lsOrganisers.setDropMode(DropMode.ON);
        lsOrganisers.setTransferHandler(new ImportTransferHandler());
    }

    private void loadEventsAndOrganisers() {
        try {
            events = eventRepo.selectAll();

            allOrganisers = new TreeSet<>(organiserRepo.selectAll());

            loadEventsModel();
            loadAllOrganisersModel();

        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to load some elements, your functionality may be limited" + ex.getMessage());
            Logger.getLogger(EventsOrganiserPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new OrganiserTransferable(lsAllOrganisers.getSelectedValue());
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(OrganiserTransferable.ORGANISER_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Organiser add = (Organiser) transferable.getTransferData(OrganiserTransferable.ORGANISER_FLAVOR);

                organiser = add;
                
                loadOrganisersModel();
                return true;

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EventsOrganiserPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private boolean formValid() {
        hideErrors();
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());
        }
        if (lsOrganisers.getModel().getSize() == 0) {
            lbOrganisersError.setVisible(true);
            ok = false;
        }

        return ok;
    }

    private void clearForm() {
        hideErrors();
        validationFields.forEach(e -> e.setText(""));
        organisersModel.clear();
        organiser = null;
        lsAllOrganisers.clearSelection();
    }

    @Override
    public boolean addOrganiser(Organiser organiser) {
        try {
            organiserRepo.create(organiser);

            loadAllOrganisersModel();
            return true;

        } catch (Exception e) {
            MessageUtils.showErrorMessage("Error", "Error adding organiser");
        }
        return false;
    }

}
